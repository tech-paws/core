// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod tech_paws {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod backend {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod schemes {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(i8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum RenderCommandType {
  PushColor = 0,
  PushPos2f = 1,
  PushSize2f = 2,
  PushTexture = 3,
  SetColorUniform = 4,
  PushColorShader = 5,
  PushTextureShader = 6,
  DrawLines = 7,
  DrawPoints = 8,
  DrawQuads = 9,

}

pub const ENUM_MIN_RENDER_COMMAND_TYPE: i8 = 0;
pub const ENUM_MAX_RENDER_COMMAND_TYPE: i8 = 9;

impl<'a> flatbuffers::Follow<'a> for RenderCommandType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for RenderCommandType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = i8::to_le(self as i8);
    let p = &n as *const i8 as *const RenderCommandType;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = i8::from_le(self as i8);
    let p = &n as *const i8 as *const RenderCommandType;
    unsafe { *p }
  }
}

impl flatbuffers::Push for RenderCommandType {
    type Output = RenderCommandType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<RenderCommandType>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RENDER_COMMAND_TYPE:[RenderCommandType; 10] = [
  RenderCommandType::PushColor,
  RenderCommandType::PushPos2f,
  RenderCommandType::PushSize2f,
  RenderCommandType::PushTexture,
  RenderCommandType::SetColorUniform,
  RenderCommandType::PushColorShader,
  RenderCommandType::PushTextureShader,
  RenderCommandType::DrawLines,
  RenderCommandType::DrawPoints,
  RenderCommandType::DrawQuads
];

#[allow(non_camel_case_types)]
pub const ENUM_NAMES_RENDER_COMMAND_TYPE:[&'static str; 10] = [
    "PushColor",
    "PushPos2f",
    "PushSize2f",
    "PushTexture",
    "SetColorUniform",
    "PushColorShader",
    "PushTextureShader",
    "DrawLines",
    "DrawPoints",
    "DrawQuads"
];

pub fn enum_name_render_command_type(e: RenderCommandType) -> &'static str {
  let index = e as i8;
  ENUM_NAMES_RENDER_COMMAND_TYPE[index as usize]
}

// struct Pos2f, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Pos2f {
  x_: f32,
  y_: f32,
} // pub struct Pos2f
impl flatbuffers::SafeSliceAccess for Pos2f {}
impl<'a> flatbuffers::Follow<'a> for Pos2f {
  type Inner = &'a Pos2f;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Pos2f>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Pos2f {
  type Inner = &'a Pos2f;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Pos2f>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Pos2f {
    type Output = Pos2f;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Pos2f as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Pos2f {
    type Output = Pos2f;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Pos2f as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl Pos2f {
  pub fn new<'a>(_x: f32, _y: f32) -> Self {
    Pos2f {
      x_: _x.to_little_endian(),
      y_: _y.to_little_endian(),

    }
  }
  pub fn x<'a>(&'a self) -> f32 {
    self.x_.from_little_endian()
  }
  pub fn y<'a>(&'a self) -> f32 {
    self.y_.from_little_endian()
  }
}

// struct Size2f, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Size2f {
  width_: f32,
  height_: f32,
} // pub struct Size2f
impl flatbuffers::SafeSliceAccess for Size2f {}
impl<'a> flatbuffers::Follow<'a> for Size2f {
  type Inner = &'a Size2f;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Size2f>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Size2f {
  type Inner = &'a Size2f;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Size2f>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Size2f {
    type Output = Size2f;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Size2f as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Size2f {
    type Output = Size2f;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Size2f as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl Size2f {
  pub fn new<'a>(_width: f32, _height: f32) -> Self {
    Size2f {
      width_: _width.to_little_endian(),
      height_: _height.to_little_endian(),

    }
  }
  pub fn width<'a>(&'a self) -> f32 {
    self.width_.from_little_endian()
  }
  pub fn height<'a>(&'a self) -> f32 {
    self.height_.from_little_endian()
  }
}

// struct Color, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Color {
  r_: f32,
  g_: f32,
  b_: f32,
  a_: f32,
} // pub struct Color
impl flatbuffers::SafeSliceAccess for Color {}
impl<'a> flatbuffers::Follow<'a> for Color {
  type Inner = &'a Color;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Color>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Color {
  type Inner = &'a Color;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Color>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Color {
    type Output = Color;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Color as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Color {
    type Output = Color;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Color as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl Color {
  pub fn new<'a>(_r: f32, _g: f32, _b: f32, _a: f32) -> Self {
    Color {
      r_: _r.to_little_endian(),
      g_: _g.to_little_endian(),
      b_: _b.to_little_endian(),
      a_: _a.to_little_endian(),

    }
  }
  pub fn r<'a>(&'a self) -> f32 {
    self.r_.from_little_endian()
  }
  pub fn g<'a>(&'a self) -> f32 {
    self.g_.from_little_endian()
  }
  pub fn b<'a>(&'a self) -> f32 {
    self.b_.from_little_endian()
  }
  pub fn a<'a>(&'a self) -> f32 {
    self.a_.from_little_endian()
  }
}

pub enum RenderCommandDataOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct RenderCommandData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RenderCommandData<'a> {
    type Inner = RenderCommandData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> RenderCommandData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RenderCommandData {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RenderCommandDataArgs<'args>) -> flatbuffers::WIPOffset<RenderCommandData<'bldr>> {
      let mut builder = RenderCommandDataBuilder::new(_fbb);
      if let Some(x) = args.size2f { builder.add_size2f(x); }
      if let Some(x) = args.pos2f { builder.add_pos2f(x); }
      if let Some(x) = args.color { builder.add_color(x); }
      builder.finish()
    }

    pub const VT_COLOR: flatbuffers::VOffsetT = 4;
    pub const VT_POS2F: flatbuffers::VOffsetT = 6;
    pub const VT_SIZE2F: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn color(&self) -> Option<&'a Color> {
    self._tab.get::<Color>(RenderCommandData::VT_COLOR, None)
  }
  #[inline]
  pub fn pos2f(&self) -> Option<&'a Pos2f> {
    self._tab.get::<Pos2f>(RenderCommandData::VT_POS2F, None)
  }
  #[inline]
  pub fn size2f(&self) -> Option<&'a Size2f> {
    self._tab.get::<Size2f>(RenderCommandData::VT_SIZE2F, None)
  }
}

pub struct RenderCommandDataArgs<'a> {
    pub color: Option<&'a  Color>,
    pub pos2f: Option<&'a  Pos2f>,
    pub size2f: Option<&'a  Size2f>,
}
impl<'a> Default for RenderCommandDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        RenderCommandDataArgs {
            color: None,
            pos2f: None,
            size2f: None,
        }
    }
}
pub struct RenderCommandDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RenderCommandDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_color(&mut self, color: &'b  Color) {
    self.fbb_.push_slot_always::<&Color>(RenderCommandData::VT_COLOR, color);
  }
  #[inline]
  pub fn add_pos2f(&mut self, pos2f: &'b  Pos2f) {
    self.fbb_.push_slot_always::<&Pos2f>(RenderCommandData::VT_POS2F, pos2f);
  }
  #[inline]
  pub fn add_size2f(&mut self, size2f: &'b  Size2f) {
    self.fbb_.push_slot_always::<&Size2f>(RenderCommandData::VT_SIZE2F, size2f);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RenderCommandDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RenderCommandDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RenderCommandData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum RenderCommandOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct RenderCommand<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RenderCommand<'a> {
    type Inner = RenderCommand<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> RenderCommand<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RenderCommand {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RenderCommandArgs<'args>) -> flatbuffers::WIPOffset<RenderCommand<'bldr>> {
      let mut builder = RenderCommandBuilder::new(_fbb);
      if let Some(x) = args.data { builder.add_data(x); }
      builder.add_type_(args.type_);
      builder.finish()
    }

    pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
    pub const VT_DATA: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn type_(&self) -> RenderCommandType {
    self._tab.get::<RenderCommandType>(RenderCommand::VT_TYPE_, Some(RenderCommandType::PushColor)).unwrap()
  }
  #[inline]
  pub fn data(&self) -> Option<RenderCommandData<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<RenderCommandData<'a>>>(RenderCommand::VT_DATA, None)
  }
}

pub struct RenderCommandArgs<'a> {
    pub type_: RenderCommandType,
    pub data: Option<flatbuffers::WIPOffset<RenderCommandData<'a >>>,
}
impl<'a> Default for RenderCommandArgs<'a> {
    #[inline]
    fn default() -> Self {
        RenderCommandArgs {
            type_: RenderCommandType::PushColor,
            data: None,
        }
    }
}
pub struct RenderCommandBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RenderCommandBuilder<'a, 'b> {
  #[inline]
  pub fn add_type_(&mut self, type_: RenderCommandType) {
    self.fbb_.push_slot::<RenderCommandType>(RenderCommand::VT_TYPE_, type_, RenderCommandType::PushColor);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<RenderCommandData<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<RenderCommandData>>(RenderCommand::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RenderCommandBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RenderCommandBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RenderCommand<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum RenderCommandsOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct RenderCommands<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RenderCommands<'a> {
    type Inner = RenderCommands<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> RenderCommands<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RenderCommands {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RenderCommandsArgs<'args>) -> flatbuffers::WIPOffset<RenderCommands<'bldr>> {
      let mut builder = RenderCommandsBuilder::new(_fbb);
      if let Some(x) = args.commands { builder.add_commands(x); }
      builder.finish()
    }

    pub const VT_COMMANDS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn commands(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<RenderCommand<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<RenderCommand<'a>>>>>(RenderCommands::VT_COMMANDS, None)
  }
}

pub struct RenderCommandsArgs<'a> {
    pub commands: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<RenderCommand<'a >>>>>,
}
impl<'a> Default for RenderCommandsArgs<'a> {
    #[inline]
    fn default() -> Self {
        RenderCommandsArgs {
            commands: None,
        }
    }
}
pub struct RenderCommandsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RenderCommandsBuilder<'a, 'b> {
  #[inline]
  pub fn add_commands(&mut self, commands: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<RenderCommand<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RenderCommands::VT_COMMANDS, commands);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RenderCommandsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RenderCommandsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RenderCommands<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_render_commands<'a>(buf: &'a [u8]) -> RenderCommands<'a> {
  flatbuffers::get_root::<RenderCommands<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_render_commands<'a>(buf: &'a [u8]) -> RenderCommands<'a> {
  flatbuffers::get_size_prefixed_root::<RenderCommands<'a>>(buf)
}

#[inline]
pub fn finish_render_commands_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<RenderCommands<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_render_commands_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<RenderCommands<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Schemes
}  // pub mod Backend
}  // pub mod TechPaws

